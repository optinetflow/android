type Arvan {
  # Identifies the date and time when the object was created.
  createdAt: DateTime!
  email: String!
  id: ID!
  nsKeys: [String!]!
  password: String!
  token: String
  tokenExpiredAt: DateTime

  # Identifies the date and time when the object was last updated.
  updatedAt: DateTime!
}

type Auth {
  # JWT access token
  accessToken: JWT!

  # JWT refresh token
  refreshToken: JWT!
  user: User!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input CreateArvanAccountInput {
  email: String!
  password: String!
}

input CreateDomainInput {
  arvanAccount: String!
  domain: String!
}

input CreateServerInput {
  domain: String!
  ip: String!
  type: ServerCountry!
}

# A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
scalar DateTime

type Dns {
  cloud: Boolean!

  # Identifies the date and time when the object was created.
  createdAt: DateTime!
  id: String!
  name: String!
  ttl: Int!
  type: String!

  # Identifies the date and time when the object was last updated.
  updatedAt: DateTime!
  value: [DnsValue!]!
}

type DnsValue {
  country: String!
  ip: String!
  port: String!
  weight: Int!
}

type Domain {
  arvanSslState: DomainState!

  # Identifies the date and time when the object was created.
  createdAt: DateTime!
  domain: String!
  expiredAt: DateTime!
  id: ID!
  letsEncryptSsl: DomainState!
  nsState: DomainState!

  # Identifies the date and time when the object was last updated.
  updatedAt: DateTime!
}

# Domain state
enum DomainState {
  APPLIED
  PENDING
}

input DomainsFiltersInput {
  arvanSslState: DomainState
  domain: String
  letsEncryptSsl: DomainState
  nsState: DomainState
}

input IssueCertInput {
  domain: String!
}

# A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
scalar JWT

input LoginInput {
  password: String!
  phone: String!
}

type Mutation {
  addArvanAccount(data: CreateArvanAccountInput!): Arvan!
  addDomain(data: CreateDomainInput!): Domain!
  addServer(data: CreateServerInput!): Server!
  changePassword(data: ChangePasswordInput!): User!
  issueCert(data: IssueCertInput!): Domain!
  login(data: LoginInput!): Auth!
  refreshToken(token: JWT!): Token!
  signup(data: SignupInput!): Auth!
  updatePort(data: UpdateDnsPortInput!): Dns!
  updateUser(data: UpdateUserInput!): User!
}

type Query {
  domains(filters: DomainsFiltersInput): [Domain!]!
  hello(name: String!): String!
  helloWorld: String!
  me: User!
}

# User role
enum Role {
  ADMIN
  USER
}

type Server {
  # Identifies the date and time when the object was created.
  createdAt: DateTime!
  domain: String!
  id: ID!
  ip: String!
  token: String
  type: ServerCountry!

  # Identifies the date and time when the object was last updated.
  updatedAt: DateTime!
}

# ServerCountry
enum ServerCountry {
  DE
  NL
}

input SignupInput {
  firstname: String
  lastname: String
  password: String!
  phone: String!
}

type Token {
  # JWT access token
  accessToken: JWT!

  # JWT refresh token
  refreshToken: JWT!
}

input UpdateDnsPortInput {
  domain: String!
  port: String!
}

input UpdateUserInput {
  firstname: String
  lastname: String
}

type User {
  # Identifies the date and time when the object was created.
  createdAt: DateTime!
  firstname: String
  id: ID!
  lastname: String
  phone: String!
  role: Role!

  # Identifies the date and time when the object was last updated.
  updatedAt: DateTime!
}
